/*
 * sim900a.c
 *
 *  Created on: 2017年5月7日
 *      Author: xianlee
 */

#include "stm32f0xx.h"
#include "stdio.h"
#include "stdlib.h"
#include "sim900a.h"
#include "usart.h"
#include "delay.h"
#include "led.h"
#include "iap.h"

#define ENABLE_TIMEOUT 0
extern updata_t updata;
gsm_data_record gsm_global_data = { "\0", 0, 0};

static const char *modetbl[2] = { "TCP", "UDP" };

void sim900a_vcc_init()
{
	GPIO_InitTypeDef GPIO_InitStructureC;

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
	GPIO_InitStructureC.GPIO_Pin = GPIO_Pin_10;
	GPIO_InitStructureC.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructureC.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOC, &GPIO_InitStructureC);
	GPIO_ResetBits(GPIOC, GPIO_Pin_10);
	delay_ms(1000);
	GPIO_SetBits(GPIOC, GPIO_Pin_10);
}

void sim900a_gpio_init()
{
	GPIO_InitTypeDef GPIO_InitStructureC;

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
	GPIO_InitStructureC.GPIO_Pin = GPIO_Pin_8;
	GPIO_InitStructureC.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructureC.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructureC);
	GPIO_ResetBits(GPIOA, GPIO_Pin_8);
}

void sim900a_poweron()
{
	if(sim900a_check_status()) {
		printf("%s %d:Sim900a is already power on!\n", __func__, __LINE__);
	} else {
		GPIO_SetBits(GPIOA, GPIO_Pin_8);
		delay_ms(1200);
		GPIO_ResetBits(GPIOA, GPIO_Pin_8);
		delay_ms(1000);
		printf("%s %d:Sim900a power on now!\n", __func__, __LINE__);
	}
}

int sim900a_check_status()
{
    int try_times = 5;

    /* hardware sync */
    do {
        if(sim900a_cmd_with_reply("AT", "OK", NULL, GSM_CMD_WAIT_SHORT)) {
            return 1;
        }
        delay_ms(100);
    } while(try_times--);

    return 0;
}

bool sim900a_cmd_with_reply (const char *cmd, const char * reply1, const char * reply2, uint32_t waittime)
{
    memset(&gsm_global_data, 0, sizeof(gsm_data_record));
    gsm_global_data.frame_len = 0;

    if((uint32_t)cmd < 0xFF) {
        sim900a_send_byte((uint32_t)cmd);
    } else {
        sim900a_usart("%s\r\n", cmd );
    }

    printf("--->%s\n", cmd);

    if ((reply1 == NULL) && (reply2 == NULL))
        return true;

#if ENABLE_TIMEOUT
    bool ret = 0;
    gsm_global_data.frame_buf[GSM_DATA_RECORD_MAX_LEN - 1] = '\0';
    TIME_LOOP_MS(waittime) {
        if ((reply1 != NULL) && (reply2 != NULL)) {
            ret = (( bool ) strstr(gsm_global_data.frame_buf, reply1)
                   || ( bool ) strstr(gsm_global_data.frame_buf, reply2));
        } else if (reply1 != 0) {
            ret = (( bool ) strstr(gsm_global_data.frame_buf, reply1));
        } else {
            ret = (( bool ) strstr(gsm_global_data.frame_buf, reply2));
        }

        if(ret) {
            break;
        }
    }

    return ret;
#else
    delay_ms(waittime);
//////////////////
for(uint32_t i=0;i<sizeof(gsm_global_data.frame_buf);i++)
{
	printf("%2x",gsm_global_data.frame_buf[i]);
}
printf("\r\n");

    if ((reply1 != 0) && (reply2 != 0)) {
        return (( bool ) strstr(gsm_global_data.frame_buf, reply1)
                || ( bool ) strstr(gsm_global_data.frame_buf, reply2));
    } else if (reply1 != 0) {
        return (( bool ) strstr(gsm_global_data.frame_buf, reply1));

    } else {
        return (( bool ) strstr(gsm_global_data.frame_buf, reply2));

    }
#endif
}

int sim900a_close_net()
{
    int ret = 0;
    ret = sim900a_cmd_with_reply("AT+CIPCLOSE=1", "CLOSE OK", NULL, GSM_CMD_WAIT_SHORT);
    ret = sim900a_cmd_with_reply("AT+CIPSHUT", "SHUT OK", NULL, GSM_CMD_WAIT_SHORT);

    return ret;
}

int sim900a_tcpudp_connect(uint8_t mode, char* ipaddr, char* port)
{
    char net_info[256] = {0};

    snprintf(net_info, 256, "AT+CIPSTART=\"%s\",\"%s\",\"%s\"", modetbl[mode],
             ipaddr, port);

    /* 判断ALREADY返回值能跟明确的指明连接已经建立 */
    if(!sim900a_cmd_with_reply(net_info, "ALREADY", NULL, GSM_CMD_WAIT_LONG)) {
        return -1;
    }

    return 1;
}

bool  GPRS_SetAPN(char *Name,char *username,char *password)
{
    char str[64];
    uint8_t answer;
    sprintf(str,"AT+CSTT=\"%s\",\"%s\",\"%s\"\r\n","kopagas","0","0");
    answer = sim900a_cmd_with_reply(str,"\r\nOK\r\n",NULL,GSM_CMD_WAIT_SHORT);
    if(answer == 1)
    {
        printf("\r\nGPRS_SetAPN(\"%s\",\"%s\",\"%s\") ---> OK\r\n",Name,username,password);
        return true;
    }
    else
    {
        printf("\r\nGPRS_SetAPN(\"%s\",\"%s\",\"%s\") ---> ERROR\r\n",Name,username,password);
        return false;
    }
}

/* assume network status was connected */
int sim900a_net_send(char* data)
{
    if (sim900a_cmd_with_reply("AT+CIPSEND", ">", NULL, GSM_CMD_WAIT_LONG)) {
        delay_us(500);
        sim900a_usart("%s", data);
        delay_us(50);
        if (sim900a_cmd_with_reply((char*) 0X1A, "OK", NULL, 1864)) {
            printf("send success!\n");
        } else {
            printf("send failed!\n");
            return -1;
        }
    } else {
        sim900a_cmd_with_reply((char*) 0X1B, NULL, NULL, GSM_CMD_WAIT_NONE);	//ESC,取消发送
        return -1;
    }

    return 1;
}

int sim900a_http_init()
{
//    int ret = -1;
//		int whiletime_out = 3;
//					
//    sim900a_cmd_with_reply("AT+HTTPTERM", NULL, NULL, GSM_CMD_WAIT_NORMAL);

//    /* init network before init http */
//    ret = sim900a_cmd_with_reply("AT+SAPBR=3,1,\"CONTYPE\",\"GPRS\"", "OK", NULL, GSM_CMD_WAIT_LONG);
//    if(ret) {
//        printf("Success to set to AT+SAPBR=3,1,GPRS!\n");
//    } else {
//        // actualy we already init network in tcp step
//        printf("Failed to set to AT+SAPBR=3,1,GPRS!\n");
//    }

//    ret = sim900a_cmd_with_reply("AT+SAPBR=3,1,\"APN\",\"CMNET\"", "OK", NULL, GSM_CMD_WAIT_LONG);
//    if(ret) {
//        printf("Success to set to AT+SAPBR=3,1,APN!\n");
//    } else {
//        printf("Failed to set to AT+SAPBR=3,1,APN!\n");
//    }

//    ret = sim900a_cmd_with_reply("AT+SAPBR=1,1", "OK", NULL, GSM_CMD_WAIT_LONG);
//    if(ret) {
//        printf("Success to set to AT+SAPBR=1,1!\n");
//    } else {
//        printf("Failed to set to AT+SAPBR=1,1!\n");
//    }

//    do {
//        ret = sim900a_cmd_with_reply("AT+HTTPINIT", "OK", NULL, GSM_CMD_WAIT_LONG);
//        if(ret) {
//            printf("Success to init to http!\n");
//            break;
//        } else {
//            printf("Failed to init to http!\n");
//        }
//				whiletime_out--;
//				if(whiletime_out == 0)break;
//    } while(1);
int ret = -1;
    int whiletime_out = 3;

    sim900a_cmd_with_reply("AT+CHTTPDISCON=0", NULL, NULL, GSM_CMD_WAIT_NORMAL);//断开
    sim900a_cmd_with_reply("AT+CHTTPDESTROY=0", NULL, NULL, GSM_CMD_WAIT_NORMAL);//注销
    return 0;
}

int sim900a_http_get(char* url)
{
//    char url_at[128] = {0};
//    int ret = -1;
//    int i = 0;
//    int ret_start = 0;
//		int whiletime_out = 100;
//		

//    sim900a_cmd_with_reply("AT+HTTPPARA=\"CONTENT\",\"application/octet-stream\"", "OK", NULL, GSM_CMD_WAIT_SHORT);
//    sim900a_cmd_with_reply("AT+HTTPPARA=\"CID\",1", "OK", NULL, GSM_CMD_WAIT_LONG);
//    //将请求的url格式化到命令中
//    snprintf(url_at, 128, "AT+HTTPPARA=\"URL\",\"http://%s\"", url);
//    printf("%s %d:%s\n", __func__, __LINE__, url_at);

//    do {
//        ret = sim900a_cmd_with_reply(url_at, "OK", NULL, GSM_CMD_WAIT_LONG);
//        if(ret) {
//            printf("%s %d:Success to connect to server!\n", __func__, __LINE__);
//            break;
//        } else {
//            break;
//        }
//    } while(!ret);

//    memset(gsm_global_data.frame_buf, 0, GSM_DATA_RECORD_MAX_LEN);
//    sim900a_cmd_with_reply("AT+HTTPACTION=0", "OK", NULL, GSM_CMD_WAIT_LONG);

//    // waiting for action cmd return
//    printf("\nDowloading:");
//    do {
//        if((bool) strstr((const char*)gsm_global_data.frame_buf, "+HTTPACTION")) {
//            printf("\n%s %d:HTTP GET finished!\n", __func__, __LINE__);
//            break;
//        } else {
//            printf(">");
//            delay_ms(1000);
//        }
//				whiletime_out--;
//				if(whiletime_out == 0)break;
//    } while(1);

//    for(i=0;i<GSM_DATA_RECORD_MAX_LEN - 20;i++) {
//        if(gsm_global_data.frame_buf[i] == '+' &&
//           gsm_global_data.frame_buf[i+1] == 'H' &&
//           gsm_global_data.frame_buf[i+2] == 'T' &&
//           gsm_global_data.frame_buf[i+3] == 'T' &&
//           gsm_global_data.frame_buf[i+4] == 'P') {
//            ret_start = i;
//            printf("%s %d:Found data start pos!\n", __func__, __LINE__);
//            break;
//        }
//    }

//    //寻找200OK返回，没有的话就返回错误
//#ifdef GSM_DEVICE_SIM800
//    if(gsm_global_data.frame_buf[ret_start+15] == '2' &&
//       gsm_global_data.frame_buf[ret_start+16] == '0' &&
//       gsm_global_data.frame_buf[ret_start+17] == '0') {
//        printf("Http return 200 OK!\n");
//				updata.FILESIZE = atoi(&gsm_global_data.frame_buf[ret_start+19]);
//				printf("File Size: %d\n",updata.FILESIZE);
//        ret = 0;
//    } else {
//        printf("Http return error code!\n");
//        ret = -1;
//    }
//#else
//    if(gsm_global_data.frame_buf[ret_start+14] == '2' &&
//       gsm_global_data.frame_buf[ret_start+15] == '0' &&
//       gsm_global_data.frame_buf[ret_start+16] == '0') {
//        printf("Http return 200 OK!\n");
//        ret = 0;
//    } else {
//        printf("Http return error code!\n");
//        ret = -1;
//    }
//#endif

		
		   char url_at[128] = {0};

    //char app_bin[128] = {0};
    int ret = -1;
    int i = 0;
    int ret_start = 0;
    int whiletime_out = 120;

    //将请求的url格式化到命令中
    snprintf(url_at, 128, "AT+CHTTPCREATE=\"http://%s\"", url);
    printf("%s %d:%s\n", __func__, __LINE__, url_at);

    do {
        ret = sim900a_cmd_with_reply(url_at, "OK", NULL, GSM_CMD_WAIT_LONG);
        if(ret) {
            printf("%s %d:Success to connect to server!\n", __func__, __LINE__);
            break;
        } else {
            break;
        }
    } while(!ret);

    sim900a_cmd_with_reply("AT+CHTTPCON=0", "OK", NULL, GSM_CMD_WAIT_LONG);//建立连接
    sim900a_cmd_with_reply("AT+CHTTPTOFS=0,\"/bin/APP1.bin\"", "OK", NULL, GSM_CMD_WAIT_LONG);//下载

		
    // waiting for action cmd return
    //下载完成大概90S左右，这里给120S
    printf("\nDowloading:");
    do {
        if((bool) strstr((const char*)gsm_global_data.frame_buf, "+CHTTPTOFSOK")) {
            printf("\n%s %d:HTTP GET finished!\n", __func__, __LINE__);
            break;
        } else {
            printf(">");
            delay_ms(1000);
        }
        whiletime_out--;
        if(whiletime_out == 0)break;
    } while(1);

	//寻找+CHTTPTOFS: 0,1,69356,500，获取bin文件大小69356
	    for(i = 0; i < GSM_DATA_RECORD_MAX_LEN - 20; i++) {
        if(gsm_global_data.frame_buf[i] == '+' &&
                gsm_global_data.frame_buf[i + 1] == 'C' &&
                gsm_global_data.frame_buf[i + 2] == 'H' &&
                gsm_global_data.frame_buf[i + 3] == 'T' &&
                gsm_global_data.frame_buf[i + 4] == 'T') {
            ret_start = i;
						updata.FILESIZE = atoi(&gsm_global_data.frame_buf[ret_start + 16]);
            printf("File Size: %d\n", updata.FILESIZE);		
            printf("%s %d:Found data start pos!\n", __func__, __LINE__);
            break;
        }
    }
	   
		ret=0;

    return ret;
}

int sim900a_http_read(int start, int size, char** data)
{
    int ret = -1;
    int i = 0;
    int read_len = 0;
    int ret_start = 0;
    char read_range[48] = {0};
    char cmd_str[16] = {0};

//    snprintf(read_range, 48, "AT+HTTPREAD=%d,%d", start, size);
		snprintf(read_range, 48, "AT+CFLR=%d,%d", start, size);

    do {
        gsm_global_data.frame_len = 0;
        if(size == 0) {
            ret = sim900a_cmd_with_reply("AT+AT+CFLR", "OK", NULL, GSM_CMD_WAIT_LONG);
        } else {
            ret = sim900a_cmd_with_reply(read_range, "+AT+CFLR", NULL, size ? (size/10):2000);
        }

        if(ret) {
            printf("Success to read data from server!\n");
            break;
        } else {
            printf("Failed to read data, retry...!\n");
            delay_ms(1000);
        }
    } while(1);

//    for(i=0;i<GSM_DATA_RECORD_MAX_LEN - 20;i++) {
//        if(gsm_global_data.frame_buf[i] == '+' &&
//           gsm_global_data.frame_buf[i+1] == 'H' &&
//           gsm_global_data.frame_buf[i+2] == 'T' &&
//           gsm_global_data.frame_buf[i+3] == 'T' &&
//           gsm_global_data.frame_buf[i+4] == 'P') {
//            ret_start = i;
//            printf("Found data start pos!\r\n");
//            break;
//        }
//    }

//    gsm_global_data.frame_buf[GSM_DATA_RECORD_MAX_LEN -1] = '\0';

//    // 获取读取到的数据长度信息
//    sscanf(gsm_global_data.frame_buf+ret_start, "%[^:]:%d", cmd_str, &read_len);
//    // 长度信息所占长度
//    i = snprintf(cmd_str, 16, "%d", read_len);

//    // +HTTPREAD: xxxx
//    *data = gsm_global_data.frame_buf+ret_start + 1 + 9 + 1 + i + 1;
//#ifdef GSM_DEVICE_SIM800
//    *data = gsm_global_data.frame_buf+ret_start + 1 + 9 + 1 + i + 1 + 1;
//#endif

//    printf("Read http data pos:%p,len:%d\n", *data, read_len);

  *data = gsm_global_data.frame_buf + 39;
    unsigned int len1=atoi(&gsm_global_data.frame_buf[18]);
		
			for(int x=0;x<512;x++)
		{
			printf("%2X",gsm_global_data.frame_buf[i+39]);
		}
		printf("len1=%d\r\n",len1);
		read_len=len1;

    return read_len;
}
